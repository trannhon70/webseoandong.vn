// var local = 'http://localhost/namkhoa2.phongkhamdakhoanhatviet.vn';
var local = 'https://www.vnbacsionline.com';

// Hàm để loại bỏ dấu tiếng Việt từ chuỗi
function removeVietnameseTones(str) {
    str = str.normalize('NFD').replace(/[\u0300-\u036f]/g, '');
    str = str.replace(/đ/g, 'd').replace(/Đ/g, 'D');
    str = str.replace(/[^a-zA-Z0-9\s]/g, '');
    return str;
}

// Hàm để tạo slug từ tiêu đề
function generateSlug(title) {
    let slug = removeVietnameseTones(title.trim())
        .toLowerCase() // Chuyển thành chữ thường
        .replace(/\s+/g, '-') // Thay thế khoảng trắng bằng dấu gạch ngang
        .replace(/-+/g, '-'); // Loại bỏ các dấu gạch ngang thừa
    return slug;
}

// Cập nhật giá trị của input ẩn và hình ảnh xem trước khi chọn hình
function saveSelectedImage() {
    const selectedImage = document.querySelector('.list-img.activeImg');
    if (selectedImage) {
        const selectedImageSrc = selectedImage.src;
        const fileName = selectedImageSrc.split('/').pop();
        const imageInput = document.getElementById('image');
        const selectedImageInput = document.getElementById('selectedImageInput');
        const selectedImageContainer = document.getElementById('selectedImageContainer');

        // Xóa hình ảnh đã chọn trước đó
        selectedImageContainer.innerHTML = '';

        // Tạo phần tử hình ảnh xem trước
        const previewImage = document.createElement('img');
        previewImage.src = `uploads/${fileName}`;
        previewImage.alt = 'Selected Image';
        previewImage.style.width = '200px';
        previewImage.style.height = '200px';

        // Tạo nút xóa
        const deleteButton = document.createElement('button');
        deleteButton.innerText = 'Xóa';
        deleteButton.style.display = 'block';
        deleteButton.style.marginTop = '10px';
        deleteButton.onclick = function () {
            // Xóa hình ảnh đã chọn
            selectedImageContainer.innerHTML = '';
            selectedImageInput.value = '';
            // Kích hoạt lại input file
            imageInput.disabled = false;
        };

        // Thêm hình ảnh xem trước và nút xóa vào container
        selectedImageContainer.appendChild(previewImage);
        selectedImageContainer.appendChild(deleteButton);

        // Cập nhật giá trị của input ẩn với tên file hình ảnh được chọn
        selectedImageInput.value = fileName;

        // Vô hiệu hóa input file
        imageInput.disabled = true;
    } else {
        console.log("No image selected");
    }
}

// Hàm để đánh dấu hình ảnh được chọn
function selectImage(imageSrc) {
    const images = document.querySelectorAll('.list-img');
    images.forEach(img => {
        img.classList.remove('activeImg');
    });
    // Thêm lớp activeImg vào hình ảnh được chọn
    imageSrc.classList.add('activeImg');
}

// Cập nhật giá trị của input slug khi tiêu đề thay đổi
const titleInput = document.getElementById("titleInput");
const slugInput = document.getElementById("slugInput");

titleInput.addEventListener("input", function () {
    let slug = generateSlug(titleInput.value);
    slugInput.value = slug;
    document.getElementById("slugHiddenInput").value = slug;
});


function getData(url, data) {
    return new Promise((resolve, reject) => {
        // Tạo chuỗi query string từ đối tượng data
        const queryString = new URLSearchParams(data).toString();
        // Thay đổi URL để thêm query string
        const fullUrl = queryString ? `${url}?${queryString}` : url;
        var xhr = new XMLHttpRequest();
        xhr.open("GET", fullUrl, true);
        xhr.onreadystatechange = function () {
            if (xhr.readyState === 4) {
                if (xhr.status === 200) {
                    resolve(JSON.parse(xhr.responseText));
                } else {
                    reject(new Error("Request failed with status: " + xhr.status));
                }
            }
        };
        xhr.send(); // Không gửi dữ liệu trong body cho phương thức GET
    });
}

function clearInputs(inputs) {
    for (let i = 0; i < inputs.length; i++) {
        let input = inputs[i];
        input.value = '';
    }
}

function getData(url, params) {
    return new Promise((resolve, reject) => {
        var xhr = new XMLHttpRequest();
        xhr.open("GET", url + (params ? `?${params}` : ''), true);
        xhr.onreadystatechange = function() {
            if (xhr.readyState === 4) {
                if (xhr.status === 200) {
                    resolve(JSON.parse(xhr.responseText));
                } else {
                    reject(new Error("Request failed with status: " + xhr.status));
                }
            }
        };
        xhr.send();
    });
}

async function fetchDataKhoa() {
    try {
        let dataKhoa = await getData(`${local}/api/khoa/get-all-khoa.php`, '');
        populateSelectkhoa('idKhoa', dataKhoa.data, 'khoa');
    } catch (error) {
        console.error("Error:", error);
    }
}
// Gọi hàm để lấy dữ liệu và cập nhật <select>
fetchDataKhoa();

// Hàm để tạo các <option> từ dữ liệu JSON
function populateSelectkhoa(selectId, data, title) {
    const selectElement = document.getElementById(selectId);
    selectElement.innerHTML = '';
    const defaultOption = document.createElement('option');
    defaultOption.value = '';
    defaultOption.text = `--- Chọn ${title} ---`;
    selectElement.appendChild(defaultOption);
    // Thêm các <option> từ dữ liệu
    data.forEach(item => {
        const option = document.createElement('option');
        option.value = item.id;
        option.text = item.name;
        selectElement.appendChild(option);
    });
}

document.getElementById('idKhoa').addEventListener('change', function() {
    const selectedValue = this.value;
    if(selectedValue){
        async function fetchDataBenhById() {
            try {
                let dataBenh = await getData(`${local}/api/benh/get-by-id-khoa.php?id_khoa=${selectedValue}`, '');
                populateSelectkhoa('id_benh', dataBenh.data, 'bệnh');
            } catch (error) {
                console.error("Error:", error);
            }
        }
        // Gọi hàm để lấy dữ liệu và cập nhật <select>
        fetchDataBenhById();
    }
   
    
});