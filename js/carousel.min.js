const track = document.querySelector('.carousel-track');
const items = document.querySelectorAll('.carousel-item');
const prevBtn = document.querySelector('.carousel-prev');
const nextBtn = document.querySelector('.carousel-next');

// Clone các item để tạo hiệu ứng vô hạn
const cloneItems = () => {
    Array.from(items).slice(0, 4).forEach(item => {
        track.appendChild(item.cloneNode(true));
    });
    Array.from(items).slice(-4).forEach(item => {
        track.insertBefore(item.cloneNode(true), track.firstChild);
    });
};

cloneItems(); // Thực hiện clone

// Cập nhật danh sách items sau khi clone
const allItems = document.querySelectorAll('.carousel-item');
const visibleItems = 4; // Số lượng item hiển thị cùng lúc
let currentIndex = visibleItems; // Bắt đầu từ item gốc đầu tiên
const itemWidth = 100 / visibleItems;
track.style.width = `${allItems.length * (25 / visibleItems)}%`;

const updateCarousel = (transition = true) => {
    track.style.transition = transition ? 'transform 0.3s ease-out' : 'none';
    track.style.transform = `translateX(-${currentIndex * itemWidth}%)`;
};

// Xử lý reset vị trí khi đi đến clone items
track.addEventListener('transitionend', () => {
    if (currentIndex <= visibleItems - 1) {
        currentIndex = allItems.length - visibleItems * 2;
        updateCarousel(false);
    } else if (currentIndex >= allItems.length - visibleItems) {
        currentIndex = visibleItems;
        updateCarousel(false);
    }
});

// Xử lý nút điều hướng
prevBtn.addEventListener('click', () => {
    currentIndex--;
    updateCarousel();
});

nextBtn.addEventListener('click', () => {
    currentIndex++;
    updateCarousel();
});

// Tự động chuyển slide mỗi 3 giây
let autoplayInterval = setInterval(() => {
    currentIndex++;
    updateCarousel();
}, 3000);

// Dừng autoplay khi người dùng tương tác
const stopAutoplay = () => {
    clearInterval(autoplayInterval);
    autoplayInterval = null;
};

// Khởi động lại autoplay sau khi người dùng tương tác
const restartAutoplay = () => {
    if (!autoplayInterval) {
        autoplayInterval = setInterval(() => {
            currentIndex++;
            updateCarousel();
        }, 3000);
    }
};

// Gán sự kiện dừng autoplay khi người dùng nhấn nút hoặc kéo
prevBtn.addEventListener('click', stopAutoplay);
nextBtn.addEventListener('click', stopAutoplay);
track.addEventListener('mousedown', stopAutoplay);
track.addEventListener('touchstart', stopAutoplay);

// Khởi động lại autoplay khi người dùng rời tay khỏi chuột
track.addEventListener('mouseup', restartAutoplay);
track.addEventListener('mouseleave', restartAutoplay);
track.addEventListener('touchend', restartAutoplay);


/////////////////////////////////////////////////////////////////
const track2 = document.querySelector('.carousel-track-2');
const items2 = document.querySelectorAll('.carousel-item1');
const prevBtn2 = document.querySelector('.carousel-prev-2');
const nextBtn2 = document.querySelector('.carousel-next-2');

// Clone các item để tạo hiệu ứng vô hạn
const cloneItems2 = () => {
    Array.from(items2).slice(0, 4).forEach(item => {
        track2.appendChild(item.cloneNode(true));
    });
    Array.from(items2).slice(-4).forEach(item => {
        track2.insertBefore(item.cloneNode(true), track2.firstChild);
    });
};

cloneItems2(); // Thực hiện clone

// Cập nhật danh sách items sau khi clone
const allItems2 = document.querySelectorAll('.carousel-item1');
const visibleItems2 = 4; // Số lượng item hiển thị cùng lúc
let currentIndex2 = visibleItems2; // Bắt đầu từ item gốc đầu tiên
const itemWidth2 = 100 / visibleItems2;
track2.style.width = `${allItems2.length * (25 / visibleItems2)}%`;

const updateCarousel2 = (transition = true) => {
    track2.style.transition = transition ? 'transform 0.3s ease-out' : 'none';
    track2.style.transform = `translateX(-${currentIndex2 * itemWidth2}%)`;
};

// Xử lý reset vị trí khi đi đến clone items
track2.addEventListener('transitionend', () => {
    if (currentIndex2 <= visibleItems2 - 1) {
        currentIndex2 = allItems2.length - visibleItems2 * 2;
        updateCarousel2(false);
    } else if (currentIndex2 >= allItems2.length - visibleItems2) {
        currentIndex2 = visibleItems2;
        updateCarousel2(false);
    }
});

// Xử lý nút điều hướng
prevBtn2.addEventListener('click', () => {
    currentIndex2--;
    updateCarousel2();
});

nextBtn2.addEventListener('click', () => {
    currentIndex2++;
    updateCarousel2();
});

// Tự động chuyển slide mỗi 3 giây
let autoplayInterval2 = setInterval(() => {
    currentIndex2++;
    updateCarousel2();
}, 3000);

// Dừng autoplay khi người dùng tương tác
const stopAutoplay2 = () => {
    clearInterval(autoplayInterval2);
    autoplayInterval2 = null;
};

// Khởi động lại autoplay sau khi người dùng tương tác
const restartAutoplay2 = () => {
    if (!autoplayInterval2) {
        autoplayInterval2 = setInterval(() => {
            currentIndex2++;
            updateCarousel2();
        }, 3000);
    }
};

// Gán sự kiện dừng autoplay khi người dùng nhấn nút hoặc kéo
prevBtn2.addEventListener('click', stopAutoplay2);
nextBtn2.addEventListener('click', stopAutoplay2);
track2.addEventListener('mousedown', stopAutoplay2);
track2.addEventListener('touchstart', stopAutoplay2);

// Khởi động lại autoplay khi người dùng rời tay khỏi chuột
track2.addEventListener('mouseup', restartAutoplay2);
track2.addEventListener('mouseleave', restartAutoplay2);
track2.addEventListener('touchend', restartAutoplay2);
